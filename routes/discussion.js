var DiscussionModel = require('../db.models/discussion.model');
var UserModel = require('../db.models/user.model');
var log = require("../functions/logs");

// expose this function to our app using module.exports
module.exports = function(app, passport, manager, hashids) {

    // save a new community
    app.post('/discussions/new', manager.ensureLoggedIn('/users/login'), function (req, res, next) {
        var receivedData =  req.body;

        // mongodb
        DiscussionModel.create({userid: req.session.userid, formid: hashids.decodeHex(receivedData.formid),
            message: receivedData.message, timestamp: Date.now()}, function(err, k) {
            if (err) {
                res.json({status: 0});
            } else {
                log.writeLog(req.session.userid, 'discussion message created', req.ip);
                res.json({status: 1});
            }
        }).catch(function () {
            res.json({status: 0});
        });
    });

    app.post('/discussions/delete', manager.ensureLoggedIn('/users/login'), function(req,res) {
        var formid = hashids.decodeHex(req.body.id);
        //
        DiscussionModel.remove({_id: formid, userid: req.session.userid}, function(err) {
            if (!err) {
                console.log("Deleted discussion message");
                log.writeLog(req.session.userid, 'discussion message deleted', req.ip);
                res.json({status: 1});
            }
            else {
                console.log("Error in deleting discussion message"+err);
                res.json({status: 0});
            }
        });
    });

    app.post('/discussions/list', manager.ensureLoggedIn('/users/login'), function (req, res, next) {
        // search comments by formid
        var formid = hashids.decodeHex(req.body.formid);

        // variables
        var messages = [];
        var authorstemp = [];
        var authorprofiles = [];
        var authorprofilespromise = [];
        var messagesoutput = [];

        return new Promise(function(resolve, reject){
            DiscussionModel.find({formid: formid}).sort({'timestamp': 'asc'}).cursor()
                .on('data', function(message){
                    // was the form generated by the current user?
                    var adminrights = false;
                    if (req.isAuthenticated()) {
                        if (req.session.userid == message.userid) {
                            // yes
                            adminrights = true;
                        }
                    }
                    // prepare the data
                    messages.push({timestamp: message.timestamp, message: message.message, userid: message.userid, id: hashids.encodeHex(message._id), admin: adminrights});
                    authorstemp.push({authorid: message.userid})
                })
                .on('error', function(err){
                    reject(err);
                })
                .on('end', function(){
                    resolve();
                });
        })
            .then(function () {
                var tempfunction = function(x) {
                    var promise = new Promise(function(resolve, reject){
                        UserModel.findById(x.authorid, function (err, k) {
                            if (err) {
                                reject(err);
                            } else {
                                authorprofiles[k._id] = k.name.first+' '+k.name.last;
                                resolve();
                            }
                        });
                    });
                    return promise;
                };

                authorstemp.forEach(function(author) {
                    authorprofilespromise.push(tempfunction(author));
                });

                return Promise.all(authorprofilespromise).then(function () {
                    console.log("promise all completed");
                });

        })
            .then(function () {
                // merge the data
                for (l = 0; l < messages.length; l++) {
                    messagesoutput[l] = {timestamp: messages[l].timestamp, message: messages[l].message, author: authorprofiles[messages[l].userid], id: messages[l].id, admin: messages[l].admin};
                }
            })
            .then(function () {
                res.json({
                    status: 1,
                    data: messagesoutput
                });
            })
            .catch(function() {
                res.json({
                    status: 0
                });
            });

    });

};